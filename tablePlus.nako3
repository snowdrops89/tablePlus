＃変数
昇順＝はい。
選択行色＝「#CCF」
前クリックセル＝空。

# テーブルを作成
テストデータ＝「名前,ふりがな,点数
太郎,たろう,55
花子,はなこ,100
一郎,いちろう,80」をCSV取得。
アイテム＝テストデータを配列複製。

テストテーブル＝テストデータのテーブル作成。
確認ボタンは「データ確認」のボタン作成。
確認ボタンをクリックした時には、
    アイテムをJSONエンコードして表示。
ここまで。
追加ボタンは「一行追加」のボタン作成。
追加ボタンをクリックした時には、
    テストテーブルにテーブル行追加
ここまで。

テストテーブルのテーブル編集可能
テストテーブルのテーブル行選択可能。
テストテーブルのテーブルセル幅変更可能
テストテーブルのテーブル自動ソート可能


＃編集可能
●(テーブルの)テーブル編集可能
    変数 全セル＝テーブルの「td」をDOM子要素全取得。
    全セルを反復。テーブルの対象に編集可能セル設定。。。

    # セル内の改行入力を禁止する。
    テーブルのキー押した時には、:
        もし、押されたキー＝「Enter」ならば、:
            対象イベントのDOMイベント処理停止。
ここまで。

●(テーブルに)テーブル行追加
    空行＝空配列。追加行＝アイテムの表行数。
    アイテムの表列数回。空行に空を配列追加。。。
    テーブルの[アイテムの表行数,0]を[空行]にテーブルセル変更。
    # 追加された行の全セルに編集可能設定を付ける
    アイテム[追加行]＝空配列。
    アイテムの表列数回
        アイテム[追加行][回数-1]＝空。
        テーブルから[追加行,回数-1]のテーブルセル取得。
        テーブルのそれに編集可能セル設定。
    ここまで。
ここまで。

●(テーブルのセルに)編集可能セル設定
    # 最初のセルからセルの高さを取得
    WINDOWの「getComputedStyle」を(テーブルから[1,0]のテーブルセル取得)でJSメソッド実行。
    セル高さ＝それ.height。//セル高さを表示。
    セルの「高さ」にセル高さをDOMスタイル設定。
    セル.contentEditable＝true。# 編集可能にする
    セルの「blur」がDOMイベント発火した時には、:
        もし、対象.nodeName＝「TD」ならば、:
            # 改行を含むコピペ対策
            テキスト＝対象.textContent。
            対象にテキストをテキスト設定。
            # テーブル数値右寄せ
            もし、DOM部品オプション.「テーブル数値右寄せ」＝trueならば、
                テキストを数列か判定。
                もし、それがtrueならば、
                    対象の「行揃え」に「右」をDOMスタイル設定。
                違えば、
                    対象の「行揃え」に「左」をDOMスタイル設定。
                ここまで。
            ここまで。
            # セルの内容をデータに反映
            行＝対象のセル行番号。
            列＝対象のセル列番号。
            もし、(アイテムの表行数)≦行ならば、アイテム[行]＝空配列。
            アイテム[行][列]＝テキスト。
ここまで。

＃行選択
●(テーブルの)テーブル行選択可能
    テーブルをマウス押した時には、:
        もし、対象.nodeName＝「TD」ならば、:
            変数 クリック行＝対象.parentNode。
            もし、前クリックセルが空でなければ、:
                変数 前行数＝前クリックセルのセル行番号。
                変数 前クリック行＝前クリックセル.parentNode。
                変数 行色情報＝DOM部品オプション.テーブル背景色。
                変数 前背景色＝行色情報[前行数%2+1]。
                前クリック行の「背景色」に前背景色をDOMスタイル設定。
            クリック行の「背景色」に選択行色をDOMスタイル設定。
            前クリックセル＝対象。
ここまで。

＃セル幅変更
●(テーブルの)テーブルセル幅変更可能
    # ヘッダの設定
    変数 全ヘッダ＝テーブルの「th」をDOM子要素全取得。
    母艦＝DOM親要素。
    全ヘッダを反復:
        # ヘッダの余白サイズを調べ、ヘッダの余白は0にする。
        WINDOWの「getComputedStyle」を対象でJSメソッド実行。
        余白サイズ＝それ.padding。//.余白 //できない
        最小幅＝それ.width。
        対象.余白＝0。
        # ヘッダのテキストを新しく作ったdivの中にうつす
        テキスト＝対象のテキスト取得。
        対象に空をテキスト設定。
        対象にDOM親部品設定。
        「div」のDOM部品作成。
        それにテキストをテキスト設定。
        # リサイズの設定。horizontalが横幅。
        # overflowがvisibleになっているとresizeが効かない
        # min-widthでヘッダの幅より小さくならないようにする。
        # ヘッダの余白をうつす
        それに{
            "resize":"horizontal",
            "overflow":"hidden",
            "white-space":"nowrap",
            "min-width":最小幅,
            "余白":余白サイズ
        }をDOMスタイル一括設定。
    母艦にDOM親部品設定。
ここまで。

＃自動ソート

●(テーブルの)テーブル自動ソート可能
    変数 全ヘッダ＝テーブルの「th」をDOM子要素全取得。
    母艦＝DOM親要素。
    全ヘッダを反復:
        記号表示場所＝対象。
        もし、対象.firstChild.tagName＝「DIV」ならば、記号表示場所＝対象.firstChild。
        記号表示場所にDOM親部品設定。
        空のラベル作成。
        それに{
            "margin-left":"0.5em",
            "vertical-align":"middle",
            "font-size":"0.7em",
            "色":灰色
        }をDOMスタイル一括設定。
    母艦にDOM親部品設定。
    テーブルをクリックした時には、
        # 三角のラベルをクリックした時も動くようにする
        もし、(対象.nodeName＝「TH」)または(対象.nodeName＝「SPAN」)または(対象.nodeName＝「DIV」)ならば、:
            セル＝対象。
            もし、(対象.nodeName＝「SPAN」)または(対象.nodeName＝「DIV」)ならば、セル＝対象.parentNode。
            テーブル＝セル.parentNode.parentNode。
            ソート列＝セルのセル列番号。
            ヘッダ＝アイテムの0を配列切り取り。
            アイテムのソート列を表ソート。
            もし、昇順＝はいでなければ、アイテムを配列逆順。
            昇順=昇順*-1。
            テーブルの[1,0]をアイテムにテーブルセル変更。
            アイテムの0へヘッダを配列挿入。
            記号＝「▲」
            もし、昇順=はいならば、記号＝「▼」
            
            全記号欄＝テーブルの「SPAN」をDOM子要素全取得。
            全記号欄を反復
                もし、対象キー＝ソート列ならば、
                    対象に記号をテキスト設定。
                違えば、
                    対象に空をテキスト設定。
                ここまで。
            ここまで。
    ここまで。
ここまで。

●(テーブルで列に記号の)ソート記号追加
    変数 全ヘッダ＝テーブルの「th」をDOM子要素全取得。
    母艦＝DOM親要素。
    全ヘッダを反復:
        対象にDOM親部品設定。
        //もし、列幅変更＝オンならば、対象.firstChildにDOM親部品設定。
        もし、対象キー＝列ならば、:
            記号のラベル作成。
            それに{
                "margin-left":"0.5em",
                "vertical-align":"middle",
                "font-size":"0.7em",
                "色":灰色
            }をDOMスタイル一括設定。
    母艦にDOM親部品設定。
ここまで。

＃
●(セルの)セル行番号
    セル.parentNode.rowIndexを戻す。
ここまで。

●(セルの)セル列番号
    セル.cellIndexを戻す。
ここまで。

●(テーブルから行列の)テーブルセル取得
    変数 [行,列]＝行列。
    テーブル["rows"][行]["cells"][列]を戻す。
ここまで。

●(テーブルから行の)テーブル行取得
    テーブル["rows"][行]を戻す。
ここまで。